{
	"name": "df_analytics_structured _to_analytics",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_structured_products",
						"type": "DatasetReference"
					},
					"name": "ProductsStructured"
				},
				{
					"dataset": {
						"referenceName": "ds_structured_stores",
						"type": "DatasetReference"
					},
					"name": "StoresStructured"
				},
				{
					"dataset": {
						"referenceName": "ds_structured_orders",
						"type": "DatasetReference"
					},
					"name": "OrdersStructured"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_analytics_stores_orders_monthly",
						"type": "DatasetReference"
					},
					"name": "StoresOrdesAnalytics"
				},
				{
					"dataset": {
						"referenceName": "ds_analytics_products_orders_monthly",
						"type": "DatasetReference"
					},
					"name": "ProductsOrdersMonthly"
				}
			],
			"transformations": [
				{
					"name": "ExcludeCancelled"
				},
				{
					"name": "MonthYear"
				},
				{
					"name": "JoinProductsOrders"
				},
				{
					"name": "GroupBy"
				},
				{
					"name": "JoinStoresMonthYear"
				},
				{
					"name": "GroupBy2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PRODUCT_ID as integer,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as double,",
				"          UPDATED_TIMESTAMP as timestamp,",
				"          UPDATED_TIMEsTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ProductsStructured",
				"source(output(",
				"          STORE_ID as short,",
				"          STORE_NAME as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> StoresStructured",
				"source(output(",
				"          ORDER_ID as integer,",
				"          ORDER_DATE as date,",
				"          CUSTOMER_ID as integer,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as double,",
				"          QUANTITY as integer,",
				"          SUBTOTAL as double,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> OrdersStructured",
				"OrdersStructured filter(ORDER_STATUS!='CANCELLED') ~> ExcludeCancelled",
				"ExcludeCancelled derive(MONTH_YEAR = toString(ORDER_DATE,'MM-yyy')) ~> MonthYear",
				"ProductsStructured, MonthYear join(ProductsStructured@PRODUCT_ID == OrdersStructured@PRODUCT_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinProductsOrders",
				"JoinProductsOrders aggregate(groupBy(PRODUCT_NAME,",
				"          MONTH_YEAR,",
				"          ORDER_STATUS),",
				"     TOTAL_AMOUNT = round(sum(SUBTOTAL),2)) ~> GroupBy",
				"StoresStructured, MonthYear join(StoresStructured@STORE_ID == OrdersStructured@STORE_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinStoresMonthYear",
				"JoinStoresMonthYear aggregate(groupBy(STORE_NAME,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          ORDER_STATUS,",
				"          MONTH_YEAR),",
				"     TOTAL_AMOUNT = round(sum(SUBTOTAL),2)) ~> GroupBy2",
				"GroupBy2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Store_Orders_Monthly.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> StoresOrdesAnalytics",
				"GroupBy sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Products_Orders_Monthly.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> ProductsOrdersMonthly"
			]
		}
	}
}